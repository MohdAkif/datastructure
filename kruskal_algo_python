class Graph:
        def __init__(self,total_vertex):
            self.vertex=total_vertex
            self.graph=[]
        def add_edge(self,u,v,w):
            self.graph.append([u,v,w])
        def find_set(self,x):
            if(self.parent[x]==x):
                return x
            return self.find_set(self.parent[x])
        def union(self,u,v):
            rootx=self.find_set(u)
            rooty=self.find_set(v)
            if(self.rank[rootx]>self.rank[rooty]):
                self.parent[rooty]=rootx
            elif(self.rank[rootx]<self.rank[rooty]):
                self.parent[rootx]=rooty
            else:
                self.parent[rooty]=rootx
                self.rank[rootx]+=1
        def kruskal(self):
            self.graph=sorted(self.graph,key=lambda x:x[2])
            self.rank=[0]*self.vertex
            self.parent=[i for i in range(self.vertex)]
            ans=0
            for u,v,w in self.graph:
                if(self.find_set(u)!=self.find_set(v)):
                    self.union(u,v)
                    print(u,v,w)
                    ans+=w
            print(ans)
                
g = Graph(9) 
g.add_edge(0, 1, 4) 
g.add_edge(1, 2, 8) 
g.add_edge(2, 3, 7) 
g.add_edge(3, 4, 9) 
g.add_edge(4, 5, 10)
g.add_edge(5, 6, 2)
g.add_edge(6, 7, 1)
g.add_edge(7, 8, 7)
g.add_edge(8, 2, 2)
g.add_edge(8, 6, 6)
g.add_edge(1,7,11)
g.add_edge(0,7,8)
g.add_edge(2,5,4)
g.add_edge(3,5,14)
g.kruskal()
