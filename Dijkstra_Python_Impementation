class Heap:
    def __init__(self,n,arr):
        self.arr=arr;
        self.size=n
        for i in range(n//2,-1,-1):
            self.min_heapify(i)
        self.Map={}
        for i in range(n):
            self.Map[i]=i
        #print(self.arr)
    def isEmpty(self):
        if(self.size==0):
            return True
        return False
    def min_heapify(self,i):
        s=i ; l=2*i+1 ; r=2*i+2
        if(l<self.size and self.arr[l][0]<self.arr[s][0]):
            s=l
        if(r<self.size and self.arr[r][0]<self.arr[s][0]):
            s=r
        if(s!=i):
            temp=self.arr[i]
            self.arr[i]=self.arr[s]
            self.arr[s]=temp
            temp=self.Map[self.Map[i]]
            self.Map[self.Map[i]]=self.Map[self.Map[s]]
            self.Map[self.Map[s]]=temp
            self.min_heapify(s)
                     
    def extract_min(self):
        temp=self.arr[0]
        self.arr[0]=self.arr[self.size-1]
        self.arr[self.size-1]=temp
        temp=self.Map[0]
        self.Map[0]=self.Map[self.size-1]
        self.Map[self.size-1]=temp
        val,index=self.arr[self.size-1]
        self.size-=1;
        self.min_heapify(0)
        return index
    def add(self,val):
        self.arr[self.size][0]=val
        curr=self.size
        ptr=int((self.size-1)/2)
        self.size+=1
        while(self.arr[ptr][0]>self.arr[curr][0]):
            temp=self.arr[ptr]
            self.arr[ptr]=self.arr[curr]
            self.arr[curr]=temp
            curr=ptr
            ptr=int((curr-1)/2)
    def change(self,x,val):
        #print(x,val,self.Map[x])
        curr=self.Map[x]
        self.arr[curr][0]=val
        ptr=int((curr-1)/2)
        while(self.arr[ptr][0]>self.arr[curr][0]):
            
            temp=self.arr[ptr]
            self.arr[ptr]=self.arr[curr]
            self.arr[curr]=temp      
            
            temp=self.Map[self.Map[ptr]]
            self.Map[self.Map[ptr]]=self.Map[self.Map[curr]]
            self.Map[self.Map[curr]]=temp
            
            curr=ptr
            ptr=int((curr-1)/2)
        #print(self.arr,self.Map)
class Graph:
    def __init__(self,n):
        self.n=n
        self.adjancy={}
        for i in range(n):
            self.adjancy[i]=[]
        self.weight={}
    def add_edge(self,u,v,w):
        self.adjancy[u].append(v)
        self.weight[(u,v)]=w
    def dijkstra(self,s):
        import math
        self.distance=[math.inf for _ in range(self.n)]
        temp=[[math.inf,i] for i in range(self.n)]
        self.distance[s]=0
        temp[s]=[0,s]
        q=Heap(self.n,temp)
        while(not q.isEmpty()):
            u=q.extract_min()
            print(u)
            for v in self.adjancy[u]:
                #print(v)
                if(self.distance[u]+self.weight[(u,v)]<self.distance[v]):
                    self.distance[v]=self.distance[u]+self.weight[(u,v)]
                    q.change(v,self.distance[u]+self.weight[(u,v)])
            print(q.arr)
        print(self.distance)
