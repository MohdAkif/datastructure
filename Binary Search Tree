class Node:
    def __init__(self,key):
        self.right=None
        self.left=None
        self.val=key
def insert(root,node):
    if(root==None):
        root=node
    else:
        if(root.val < node.val):
            if(root.right==None):
                root.right=node
            else:
                insert(root.right,node)
        else:
            if(root.left==None):
                root.left=node
            else:
                insert(root.left,node) 
def inordersuccessor(root):
    c=root
    while(c.left!=None):
        c=c.left
    return c
    
def deletion(root,s):
    if(root==None):
        return r
    if(s<root.v):
        root.left=deletion(root.left,s)
    elif(s>root.v):
        root.right=deletion(root.right,s)
    else:
        #if node have only one child
        if(root.left==None):
            temp=root.right
            root=None
            return temp
        elif(root.right==None):
            temp=root.left
            root=None
            return temp
        io=inordersuccessor(root.right)
        root.v=io.v
        root.right=deletion(root.right,io.v)
    return root
    
def pre(root):
    if(root):
        pre(root.left)
        print(root.val)
        pre(root.right)

def search(root,v):
    if(root==None or root.val==v):
        return root
    else:
        if(root.val<v):
            return search(root.right,v)
        return search(root.left,v)
    
def max_(root):
    if(root==None or root.right==None):
        return root
    return max_(root.right)

def min_(root):
    if(root==None or root.left==None):
        return root
    return min_(root.left)
def Height(root):
    if(root==None):
        return 0
    else:
        l=Height(root.left)
        r=Height(root.right)
        if(l>r):
            return l+1
        else:
            return r+1
        
def total(root):
    if(root==None):
        return 0
    return total(root.left)+total(root.right)+1
            
n=int(input())
va=[int(i) for i in input().strip().split()]
r=Node(va[0])
for i in va[1:]:
    insert(r,Node(i))
pre(r)

if(search(r,4)):
    print("yes")
else:
    print("no")

print('maximum number is = {x}'.format(x=max_(r).val))
print(min_(r).val)
print(Height(r))
print(total(r))
