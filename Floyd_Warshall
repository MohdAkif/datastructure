import numpy as np
def flod_warshall(G):
    D=G
    t=len(G[0])
    P=np.ones((t,t))
    for i in range(t):
        for j in range(t):
            if(D[i][j]==0 or D[i][j]==99999):
                P[i][j]=99999
            else:
                P[i][j]=i+1
    for k in range(t):
        for i in range(t):
            for j in range(t):
                if(D[i][j]>D[i][k]+D[k][j]):
                    D[i][j]=D[i][k]+D[k][j]
                    P[i][j]=k+1
                else:
                    D[i][j]=D[i][j]
                    P[i][j]=P[i][j]
                
    print('Shortest path of each node : ')
    for i in range(t):
        for j in range(t):
            print(D[i][j],end="     ")
        print()

    print()
    print("predecesor of each vertex : ")
    for i in range(t):
        for j in range(t):
            print(P[i][j],end="  ")
        print()
        
n=int(input("Enter the number of node : "))
G=[[0,3,8,99999,-4],[99999,0,99999,1,7],[99999,4,0,99999,99999],[2,99999,-5,0,99999],[99999,99999,99999,6,0]]
#for i in range(n):
#    G.append([int(i) for i in input().strip().split()])
flod_warshall(G)
